<?php
/*
 * Plugin Name: WP Discourse Webhook Request
 * Description: A skeleton plugin for processing a Webhook request to a custom endpoint from Discourse to WordPress.
 * Version: 0.1
 * Author: scossar
 */

namespace WPDiscourseWebhookRequest;

/**
 * References:
 * https://developer.wordpress.org/rest-api/
 * http://v2.wp-api.org/extending/adding/
 * https://meta.discourse.org/t/setting-up-webhooks/49045
 * https://meta.discourse.org/t/how-to-use-discourse-webhooks-with-php/50543
 */

class WPDiscourseWebhookRequest {
	static $group_name = 'test';
	static $plan_id = '183';

	public function __construct() {
		// Used to register an endpoint object.
		add_action( 'rest_api_init', array( $this, 'initialize_custom_route' ) );
	}

	/**
	 * Initializes a route and an endpoint.
	 * The URI is the route, the mapping of the route to a method is an endpoint.
	 * The callback handles the request to the route.
	 */
	public function initialize_custom_route() {
		/**
		 * `register_rest_route` is passed a namespace, a route, and an array of options.
		 * In this example, the complete URL to be set on Discourse is `http://example.com/wp-json/scossar/v1/example-route`
		 */
		register_rest_route( 'products_access/v1', '/update', array(
			'methods'  => 'POST',
			'callback' => array( $this, 'process_discourse_request' ),
		) );
	}

	/**
	 * Callback function for handling the REST API request.
	 * WP_REST_Request objects are generated by WordPress when an HTTP request is made to a registered REST API route.
	 * They are used to store and retrieve information for the current request.
	 * Reference: https://developer.wordpress.org/reference/classes/wp_rest_request/
	 *
	 * @param \WP_REST_Request $data
	 *
	 * @return null
	 */
	public function process_discourse_request( $data ) {
		$data = $this->verify_discourse_request( $data );

		if ( is_wp_error( $data ) ) {

			error_log( $data->get_error_message() );

			return null;
		}
		// Do something
		$payload = $data['usergroup'];
		$this->update_membership_data($payload);

		$this->write_log( 'Success!' );
		$json = $data->get_json_params();
		$this->write_log( 'Parsed JSON' );
		$this->write_log( $json );

		return 1;
	}

	protected function update_membership_data($payload) {
		if($payload['group'] != self::$group_name) return;
		if(!in_array($payload['type'], array('user_added_to_group', 'user_removed_from_group'))) return;

		$user = get_user_by('email', $payload['user_email']);
		if(!$user) return;

		$membership = wc_memberships_get_user_membership($user->ID, self::$plan_id);
		$this->update_user_membership($user, self::$plan_id, $membership, $payload['type']);
		// $memberships = wc_memberships_get_user_memberships($user->ID);

	}

	protected function update_user_membership($user, $plan_id, $membership, $type) {
		$pause = ($type == "user_removed_from_group");

		if($membership) {
			if($pause) {
				$membership->update_status('delayed');
			} else {
				$membership->update_status('active');
			}
		} else {
			if(!$pause) {
				$args = array(
					'user_id' => $user->ID,
					'plan_id' => $plan_id
				);
				wc_memberships_create_user_membership($args);
			}
		}
	}
	/**
	 * Verify that the request originated from a Discourse webhook and the the secret keys match.
	 *
	 * @param \WP_REST_Request $data
	 *
	 * @return \WP_Error|\WP_REST_Request
	 */
	protected function verify_discourse_request( $data ) {
		// The X-Discourse-Event-Signature consists of 'sha256=' . hamc of raw payload.
		// It is generated by computing `hash_hmac( 'sha256', $payload, $secret )`
		if ( $sig = substr( $data->get_header( 'X-Discourse-Event-Signature' ), 7 ) ) {
			$payload = $data->get_body();
			// Key used for verifying the request - a matching key needs to be set on the Discourse webhook.
			$secret  = 'thisisfortesting';
			if ( $sig === hash_hmac( 'sha256', $payload, $secret ) ) {

				return $data;
			} else {

				return new \WP_Error( 'Authentication Failed', 'Discourse Webhook Request Error: signatures did not match.' );
			}
		} else {
			return new \WP_Error( 'Access Denied', 'Discourse Webhook Request Error: the X-Discourse-Event-Signature was not set for the request.' );
		}
	}

	// Used for development - allows for logging objects and arrays.
	protected function write_log( $log ) {
		if ( is_array( $log ) || is_object( $log ) ) {
			error_log( print_r( $log, true ) );
		} else {
			error_log( $log );
		}
	}
}

new WPDiscourseWebhookRequest();
